ENV['VAGRANT_NO_PARALLEL'] = 'no'
NODE_ROLES = ["server", "agent"]
NODE_BOX = 'bento/ubuntu-24.04'
NODE_CPUS = 2
NODE_MEMORY = 2048
NETWORK4_PREFIX = (ENV["E2E_NETWORK_PREFIX"] || "10.10.10")
START_IP = (ENV["E2E_START_IP"] || 100).to_i
GOCOVER = (ENV['E2E_GOCOVER'] || "")
GITHUB_BRANCH = "master"
RELEASE_VERSION = ""
PRIVATE_KEY_PATH = (ENV['E2E_PRIV_KEY_PATH'] || "")
PUBLIC_KEY_PATH = (ENV['E2E_PUB_KEY_PATH'] || "")

def provision(vm, role, node_num)
    vm.box = NODE_BOX
    vm.hostname = "#{role}"
    node_ip = "#{NETWORK4_PREFIX}.#{START_IP+node_num}"
    vm.network "private_network", ip: node_ip, netmask: "255.255.255.0"

    vagrant_defaults = File.exist?("./vagrantdefaults.rb") ? "./vagrantdefaults.rb" : "../vagrantdefaults.rb"
    load vagrant_defaults

    defaultOSConfigure(vm)
    addCoverageDir(vm, role, GOCOVER)

    if role == "server"
        vm.provision 'k3s-inistall', type: 'k3s', run: 'once' do |k3s|
            k3s.config_mode = '0644'
            k3s.args = "server "
            k3s.config = <<~YAML
                token: vagrant
                node-external-ip: #{node_ip}
            YAML
            k3s.env = ["K3S_KUBECONFIG_MODE=0644"]
        end
    end
    if role == "agent"
        vm.provision :k3s, run: 'once' do |k3s|
            k3s.config_mode = '0644'
            k3s.args = "agent "
            k3s.config = <<~YAML
                server: https://#{NETWORK4_PREFIX}.#{START_IP}:6443
                token: vagrant
                node-external-ip: #{node_ip}
            YAML
            k3s.env = ["K3S_KUBECONFIG_MODE=0644"]
        end
    end
end

Vagrant.configure("2") do |config|

    config.vagrant.plugins = ["vagrant-k3s", "vagrant-reload", "vagrant-libvirt", "vagrant-scp"]
    config.vm.provider "libvirt" do |v|
        v.cpus = NODE_CPUS
        v.memory = NODE_MEMORY
        v.default_prefix = File.basename(Dir.getwd) + "_" + Time.now.to_i.to_s + "_"
    end

    if File.exist?(PRIVATE_KEY_PATH)
        config.ssh.insert_key = false
        config.ssh.private_key_path = [PRIVATE_KEY_PATH, "~/.vagrant.d/insecure_private_key"]
    end

    if File.exist?(PUBLIC_KEY_PATH)
        public_key = File.read(PUBLIC_KEY_PATH).strip
        config.vm.provision 'shell', inline: 
            "echo #{public_key} >> /home/vagrant/.ssh/authorized_keys
            chmod 600 /home/vagrant/.ssh/authorized_keys
            chown -R vagrant:vagrant /home/vagrant/.ssh
            "
    end

    NODE_ROLES.each_with_index do |role, i|
        config.vm.define role do |node|
          provision(node.vm, role, i)
        end
    end
end